import pandas as pd
import streamlit as st

# Define the data
data = [
    {
        "وجبة": "شوفان",
        "المكونات": "شوفان, حليب, موز, عسل, قرفة",
        "وزن المكونات (غرام)": "50, 100, 50, 10, 2",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 250,
        "الدهون (غرام)": 4,
        "الكربوهيدرات (غرام)": 45,
        "البروتين (غرام)": 8,
        "الكالسيوم (ملغ)": 150,
        "فيتامين C (ملغ)": 5,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "ساندويتش سلطة البيض",
        "المكونات": "بيض, خبز, مايونيز, خردل, خس, طماطم",
        "وزن المكونات (غرام)": "100, 50, 20, 10, 20, 20",
        "نوع الوجبة": "غداء",
        "السعرات الحرارية": 320,
        "الدهون (غرام)": 18,
        "الكربوهيدرات (غرام)": 25,
        "البروتين (غرام)": 14,
        "الكالسيوم (ملغ)": 90,
        "فيتامين C (ملغ)": 8,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "كاري الدجاج مع الأرز",
        "المكونات": "دجاج, بصل, طماطم, حليب جوز الهند, مسحوق كاري, أرز",
        "وزن المكونات (غرام)": "100, 50, 50, 100, 10, 150",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 400,
        "الدهون (غرام)": 20,
        "الكربوهيدرات (غرام)": 35,
        "البروتين (غرام)": 22,
        "الكالسيوم (ملغ)": 60,
        "فيتامين C (ملغ)": 10,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "زبادي يوناني مع عسل ومكسرات",
        "المكونات": "زبادي يوناني, عسل, لوز, جوز",
        "وزن المكونات (غرام)": "150, 20, 15, 15",
        "نوع الوجبة": "وجبة خفيفة",
        "السعرات الحرارية": 200,
        "الدهون (غرام)": 10,
        "الكربوهيدرات (غرام)": 15,
        "البروتين (غرام)": 15,
        "الكالسيوم (ملغ)": 200,
        "فيتامين C (ملغ)": 0,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "فطور البيض بالشاكشوكة",
        "المكونات": "طماطم, فلفل حلو, بصل, بيض, ثوم, كمون, فلفل حار مجفف",
        "وزن المكونات (غرام)": "200, 100, 50, 4, 5, 2, 2",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 320,
        "الدهون (غرام)": 18,
        "الكربوهيدرات (غرام)": 15,
        "البروتين (غرام)": 15,
        "الكالسيوم (ملغ)": 80,
        "فيتامين C (ملغ)": 30,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "فول مدمس",
        "المكونات": "فول, زيت زيتون, ثوم, عصير ليمون, كمون, ملح",
        "وزن المكونات (غرام)": "100, 10, 5, 10, 2, 2",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 300,
        "الدهون (غرام)": 8,
        "الكربوهيدرات (غرام)": 45,
        "البروتين (غرام)": 15,
        "الكالسيوم (ملغ)": 100,
        "فيتامين C (ملغ)": 4,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "محشي",
        "المكونات": "كوسة, باذنجان, فلفل ألوان, طماطم, أرز, بصل, ثوم, بقدونس, شبت, صلصة طماطم",
        "وزن المكونات (غرام)": "100, 100, 50, 100, 50, 50, 10, 10, 10, 100",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 350,
        "الدهون (غرام)": 7,
        "الكربوهيدرات (غرام)": 60,
        "البروتين (غرام)": 10,
        "الكالسيوم (ملغ)": 80,
        "فيتامين C (ملغ)": 25,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "ملوخية",
        "المكونات": "ورق ملوخية, ثوم, كزبرة, مرقة دجاج, زيت زيتون, عصير ليمون",
        "وزن المكونات (غرام)": "100, 5, 5, 200, 10, 10",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 250,
        "الدهون (غرام)": 15,
        "الكربوهيدرات (غرام)": 10,
        "البروتين (غرام)": 20,
        "الكالسيوم (ملغ)": 150,
        "فيتامين C (ملغ)": 30,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "كبدة إسكندراني",
        "المكونات": "كبدة, بصل, ثوم, خل, كمون, كزبرة, زبدة",
        "وزن المكونات (غرام)": "100, 50, 5, 10, 2, 2, 10",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 280,
        "الدهون (غرام)": 12,
        "الكربوهيدرات (غرام)": 5,
        "البروتين (غرام)": 25,
        "الكالسيوم (ملغ)": 30,
        "فيتامين C (ملغ)": 2,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "ملوكية",
        "المكونات": "ورق ملوكية, دجاج, ثوم, كزبرة, زيت زيتون, عصير ليمون",
        "وزن المكونات (غرام)": "100, 100, 5, 5, 10, 10",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 320,
        "الدهون (غرام)": 18,
        "الكربوهيدرات (غرام)": 10,
        "البروتين (غرام)": 28,
        "الكالسيوم (ملغ)": 150,
        "فيتامين C (ملغ)": 30,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "رز باللبن",
        "المكونات": "أرز, حليب, سكر, فانيليا",
        "وزن المكونات (غرام)": "100, 150, 30, 2",
        "نوع الوجبة": "حلوى",
        "السعرات الحرارية": 280,
        "الدهون (غرام)": 5,
        "الكربوهيدرات (غرام)": 55,
        "البروتين (غرام)": 6,
        "الكالسيوم (ملغ)": 200,
        "فيتامين C (ملغ)": 0,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "شكشوكة",
        "المكونات": "طماطم, فلفل حلو, بصل, بيض, ثوم, كمون, بابريكا, فلفل حار مجفف",
        "وزن المكونات (غرام)": "200, 100, 50, 4, 5, 2, 2, 2",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 320,
        "الدهون (غرام)": 18,
        "الكربوهيدرات (غرام)": 15,
        "البروتين (غرام)": 15,
        "الكالسيوم (ملغ)": 80,
        "فيتامين C (ملغ)": 30,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "فسيخ",
        "المكونات": "سمك مملح, خبز",
        "وزن المكونات (غرام)": "150, 100",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 220,
        "الدهون (غرام)": 10,
        "الكربوهيدرات (غرام)": 15,
        "البروتين (غرام)": 20,
        "الكالسيوم (ملغ)": 100,
        "فيتامين C (ملغ)": 2,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "تعمية (فلافل)",
        "المكونات": "فول مدمس, كزبرة, بقدونس, ثوم, بصل, كمون, دقيق",
        "وزن المكونات (غرام)": "100, 20, 20, 5, 50, 2, 20",
        "نوع الوجبة": "غداء",
        "السعرات الحرارية": 250,
        "الدهون (غرام)": 10,
        "الكربوهيدرات (غرام)": 35,
        "البروتين (غرام)": 10,
        "الكالسيوم (ملغ)": 60,
        "فيتامين C (ملغ)": 6,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "مكرونة بالبشاميل",
        "المكونات": "مكرونة, صلصة بشاميل (زبدة, دقيق, حليب), لحم مفروم, صلصة طماطم",
        "وزن المكونات (غرام)": "100, 150, 100, 50",
        "نوع الوجبة": "عشاء",
        "السعرات الحرارية": 450,
        "الدهون (غرام)": 20,
        "الكربوهيدرات (غرام)": 40,
        "البروتين (غرام)": 25,
        "الكالسيوم (ملغ)": 150,
        "فيتامين C (ملغ)": 8,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "كنافة",
        "المكونات": "عجينة كنافة, جبنة, شراب سكر, زبدة",
        "وزن المكونات (غرام)": "100, 100, 50, 20",
        "نوع الوجبة": "حلوى",
        "السعرات الحرارية": 400,
        "الدهون (غرام)": 22,
        "الكربوهيدرات (غرام)": 40,
        "البروتين (غرام)": 10,
        "الكالسيوم (ملغ)": 200,
        "فيتامين C (ملغ)": 0,
        "النوع": "الحفاظ على الوزن"
    },
    {
        "وجبة": "خبز بلدي مع فول",
        "المكونات": "خبز بلدي, فول, زيت زيتون, عصير ليمون, ملح",
        "وزن المكونات (غرام)": "100, 100, 10, 5, 2",
        "نوع الوجبة": "فطور",
        "السعرات الحرارية": 300,
        "الدهون (غرام)": 7,
        "الكربوهيدرات (غرام)": 45,
        "البروتين (غرام)": 15,
        "الكالسيوم (ملغ)": 100,
        "فيتامين C (ملغ)": 4,
        "النوع": "الحفاظ على الوزن"
    }
]

# Create DataFrame
df = pd.DataFrame(data)

# Define color mappings for each meal type
color_mapping = {
    "فطور": "#FFA07A",  # Light Salmon
    "غداء": "#87CEEB",      # Sky Blue
    "عشاء": "#90EE90",     # Light Green
    "وجبة خفيفة": "#FFD700"       # Gold
}

# Filter meals based on user preferences
def filter_meals(df, min_calories, max_calories, min_fat, max_fat):
    filtered_df = df[(df['السعرات الحرارية'] > min_calories) & (df['السعرات الحرارية'] < max_calories)
                     & (df['الدهون (غرام)'] > min_fat) & (df['الدهون (غرام)'] < max_fat)]
    return filtered_df

def generate_meals(df, min_calories, max_calories, min_fat, max_fat, num_breakfast, num_lunch, num_dinner, num_snacks, dietary_restrictions, excluded_ingredients):
    st.write("Input values:")
    st.write(f"min_calories: {min_calories}, max_calories: {max_calories}, min_fat: {min_fat}, max_fat: {max_fat}")
    
    # Filter meals based on calorie and fat restrictions
    filtered_df = df[(df['السعرات الحرارية'] >= min_calories) & (df['السعرات الحرارية'] <= max_calories) & (df['الدهون (غرام)'] >= min_fat) & (df['الدهون (غرام)'] <= max_fat)]
    
    # Filter out meals based on dietary restrictions
    for restriction in dietary_restrictions:
        filtered_df = filtered_df[~filtered_df['المكونات'].str.contains(restriction, case=False)]
    
    # Exclude meals based on specified ingredients
    if excluded_ingredients:
        excluded_ingredients_list = [ingredient.strip().lower() for ingredient in excluded_ingredients.split(',')]
        for ingredient in excluded_ingredients_list:
            filtered_df = filtered_df[~filtered_df['المكونات'].str.contains(ingredient, case=False)]
    
    suggested_meals = {}
    for meal_type, num_meals in zip(["فطور", "غداء", "عشاء", "وجبة خفيفة"], [num_breakfast, num_lunch, num_dinner, num_snacks]):
        meals_available = filtered_df[filtered_df['نوع الوجبة'] == meal_type]
        if len(meals_available) > 0:
            if len(meals_available) >= num_meals:
                suggested_meals[meal_type] = meals_available.sample(n=num_meals, replace=False)
            else:
                st.warning(f"Not enough {meal_type} meals available. Showing all available.")
                suggested_meals[meal_type] = meals_available
        else:
            st.warning(f"No {meal_type} meals available.")
            suggested_meals[meal_type] = pd.DataFrame(columns=df.columns)  # Empty DataFrame
    return suggested_meals

def main():
    st.title("مخطط الوجبات اليومي")
    
    min_calories = st.sidebar.number_input("السعرات الحرارية الدنيا", min_value=0, value=0)
    max_calories = st.sidebar.number_input("السعرات الحرارية القصوى", min_value=0, value=2500)
    num_breakfast = st.sidebar.number_input("عدد وجبات الفطور", min_value=0, value=2)
    num_lunch = st.sidebar.number_input("عدد وجبات الغداء", min_value=0, value=2)
    num_dinner = st.sidebar.number_input("عدد وجبات العشاء", min_value=0, value=3)
    num_snacks = st.sidebar.number_input("عدد وجبات الوجبات الخفيفة", min_value=0, value=1)
    
    min_fat = st.sidebar.number_input("الدهون الدنيا (غرام)", min_value=0, value=0)
    max_fat = st.sidebar.number_input("الدهون القصوى (غرام)", min_value=0, value=100)

    dietary_restrictions = st.sidebar.multiselect("القيود الغذائية", ["نباتي", "نباتي", "خالي من الجلوتين"])
    
    excluded_ingredients = st.sidebar.text_input("المكونات المستبعدة (مفصولة بفاصلة)")

    if min_calories > max_calories:
        st.warning("السعرات الحرارية الدنيا لا يمكن أن تكون أكبر من السعرات الحرارية القصوى. يرجى ضبط القيم.")
        return

    if st.button("إنشاء الوجبات"):
        suggested_meals = generate_meals(df, min_calories, max_calories, min_fat, max_fat, num_breakfast, num_lunch, num_dinner, num_snacks, dietary_restrictions, excluded_ingredients)
        total_calories = sum(meal['السعرات الحرارية'].sum() for meal in suggested_meals.values())
        if total_calories > max_calories:
            st.warning("إجمالي السعرات الحرارية للوجبات المختارة يتجاوز السعرات الحرارية القصوى. يرجى ضبط كمية الوجبات.")
            return

        st.info(f"Total calories of selected meals: {total_calories} kcal (Maximum: {max_calories} kcal)")


        st.subheader("الوجبات المُنشأة")
        for meal_type, meal_data in suggested_meals.items():
            st.subheader(meal_type)
            meal_data_styled = meal_data.style.apply(lambda row: [f"background-color: {color_mapping.get(meal_type, '#FFFFFF')}" for _ in row], axis=1)
            st.write(meal_data_styled)
     if st.button("Open Main 3.py"):
        subprocess.Popen(["streamlit", "run", "Main 3.py"])
if __name__ == "__main__":
    main()
